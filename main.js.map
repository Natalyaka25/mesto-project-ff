{"version":3,"file":"main.js","mappings":"mBACA,ICDMA,EAAS,CACbC,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAIpB,SAASC,EAAcC,GACrB,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,UAADC,OAAWL,EAAIM,QACtC,CAGO,ICbDC,EAAeC,SAASC,cAAc,kBAAkBC,QAiBvD,SAASC,EACdC,EAAQC,EAERC,GACA,IAFEC,EAAYF,EAAZE,aAAcC,EAAUH,EAAVG,WAAYC,EAAUJ,EAAVI,WAGtBC,EAAOX,EAAaE,cAAc,iBAAiBU,WAAU,GAC7DC,EAAYF,EAAKT,cAAc,gBAC/BY,EAAYH,EAAKT,cAAc,gBAC/Ba,EAAeJ,EAAKT,cAAc,wBAClCc,EAAaL,EAAKT,cAAc,sBAChCe,EAAYN,EAAKT,cAAc,qBAC/BgB,EAAe,8BAErBL,EAAUM,IAAMd,EAASe,KACzBP,EAAUQ,IAAMhB,EAASiB,KACzBR,EAAUS,YAAclB,EAASiB,KACjCX,EAAKa,QAAQC,GAAKpB,EAASqB,IAC3BT,EAAUM,YAAclB,EAASsB,MAAMC,OAGvCX,EAAUM,YAAclB,EAASsB,MAAMC,OAGvC,IAAMC,EAAcxB,EAASsB,MAAMG,MAAK,SAACC,GAAI,OAAKA,EAAKL,MAAQnB,CAAa,IACtEyB,EAAW3B,EAAS4B,MAAMP,MAAQnB,EA0BxC,OAvBIsB,EACFb,EAAWkB,UAAUC,IAAIjB,GAEzBF,EAAWkB,UAAUE,OAAOlB,GAG9BF,EAAWqB,iBAAiB,SAAS,WACnC5B,EAAWJ,EAASqB,IAAKV,EAAYC,EACvC,IAEIe,GACFjB,EAAauB,MAAMC,QAAU,QAC7BxB,EAAasB,iBAAiB,SAAS,WACrC7B,EAAaH,EAASqB,IAAKf,EAC7B,KAEAI,EAAauB,MAAMC,QAAU,OAG/B1B,EAAUwB,iBAAiB,SAAS,WAClC3B,EAAWL,EACb,IAEOM,CACT,CCvEA,IAAM6B,EAAkB,kBAGjB,SAASC,EAAUC,GAGxBzC,SAASoC,iBAAiB,UAAWM,GAOrCD,EAAaR,UAAUC,IAAIK,GAC3BvC,SAASoC,iBAAiB,UAAWM,EACvC,CAIO,SAASC,EAAWF,GACzBA,EAAaR,UAAUE,OAAOI,GAE9BvC,SAAS4C,oBAAoB,UAAWF,EAC1C,CAGA,SAASA,EAAaG,GACpB,GAAgB,WAAZA,EAAIC,IAAkB,CACxB,IAAMC,EAAc/C,SAASC,cAAc,IAADJ,OAAK0C,IAC3CQ,GACFJ,EAAWI,EAEf,CACF,CAGO,SAASC,EAAmBH,GAC7BA,EAAII,SAAWJ,EAAIK,eACrBP,EAAWE,EAAIK,cAEnB,CCxCA,IAAMC,EAAiB,SACrBC,EACAC,EACAC,EAAYjD,GAET,IADDkD,EAAelD,EAAfkD,gBAAiBC,EAAUnD,EAAVmD,WAEbC,EAAeL,EAAYnD,cAAc,IAADJ,OAAKwD,EAAa7B,GAAE,WAClE6B,EAAapB,UAAUC,IAAIqB,GAC3BE,EAAanC,YAAcgC,EAC3BG,EAAaxB,UAAUC,IAAIsB,EAC7B,EAEME,EAAiB,SACrBN,EACAC,EAAYM,GAET,IADDJ,EAAeI,EAAfJ,gBAAiBC,EAAUG,EAAVH,WAEbC,EAAeL,EAAYnD,cAAc,IAADJ,OAAKwD,EAAa7B,GAAE,WAC7DiC,IAELJ,EAAapB,UAAUE,OAAOoB,GAC9BE,EAAaxB,UAAUE,OAAOqB,GAC9BC,EAAanC,YAAc,GAC7B,EAMMsC,EAAiB,SAACC,EAAMC,EAA2BC,GAAe,IAAtCC,EAAmBF,EAAnBE,oBAC3BH,IACLA,EAAOI,SAAWF,EAClBF,EAAO5B,UAAUiC,OAAOF,EAAqBD,GAC/C,EAEMI,EAAoB,SAACC,EAAWC,EAAelF,GACnD,IAAMmF,EAXgB,SAACF,GACvB,OAAOA,EAAUvC,MAAK,SAACwB,GAAY,OAAMA,EAAakB,SAASC,KAAK,GACtE,CASoBC,CAAgBL,GAClCR,EAAeS,EAAelF,EAAQmF,EACxC,EAEMI,EAAU,SAACtB,EAAaC,EAAcsB,GAK1C,GAHAtB,EAAauB,kBAAkB,IAG3BvB,EAAawB,UAA0C,KAA9BxB,EAAayB,MAAMC,OAAe,CAC7D,IAAMzB,EAAeD,EAAa9B,QAAQyD,WAG1C,OAFA3B,EAAauB,kBAAkBtB,GAC/BH,EAAeC,EAAaC,EAAcC,EAAcqB,IACjD,CACT,CAGA,GAAItB,EAAa9B,QAAQ0D,kBACF,IAAIC,OAAO7B,EAAa9B,QAAQ0D,iBACnCE,KAAK9B,EAAayB,OAAQ,CAC1C,IAAMxB,EAAeD,EAAa9B,QAAQ6D,YAG1C,OAFA/B,EAAauB,kBAAkBtB,GAC/BH,EAAeC,EAAaC,EAAcC,EAAcqB,IACjD,CACT,CAIF,OAAKtB,EAAakB,SAASC,OAU3Bd,EAAeN,EAAaC,EAAcsB,IACnC,IAVLxB,EACEC,EACAC,EACAA,EAAagC,kBACbV,IAEK,EAKX,EAkDaW,EAAkB,SAAClC,EAAauB,GAE3C,IAAMP,EAAYmB,MAAMC,KACtBpC,EAAYqC,iBAAiBd,EAAce,gBAGvCrB,EAAgBjB,EAAYnD,cAChC0E,EAAcgB,sBAIhBvB,EAAUwB,SAAQ,SAACvC,GACjBK,EAAeN,EAAaC,EAAcsB,GAC1CtB,EAAauB,kBAAkB,GACjC,IAGAhB,EAAeS,EAAeM,GAAe,EAC/C,E,sGC5HA,IAgDIkB,EAhDEC,EAAc9F,SAASC,cAAc,iBACrC8F,EAAiB/F,SAASC,cAAc,wBACxC+F,EAAoBhG,SAASC,cAAc,yBAC3CgG,EAASjG,SAASyF,iBAAiB,UAGnCS,EAAelG,SAASC,cAAc,oBACtCkG,EAAqBnG,SAASoG,MAAM,gBACpCC,EAAYF,EAAmBlG,cAAc,2BAC7CqG,EAAWH,EAAmBlG,cAClC,kCAEIsG,EAAcvG,SAASC,cAAc,mBACrCuG,EAAaxG,SAASC,cAAc,yBAGpCwG,EAAezG,SAASC,cAAc,wBACtCyG,EAAkB1G,SAASoG,MAAM,aACjCO,EAAaD,EAAgBzG,cACjC,gCAEI2G,EAAYF,EAAgBzG,cAAc,0BAC1C4G,EAAa7G,SAASC,cAAc,qBACpC6G,EAAYD,EAAW5G,cAAc,iBACrC8G,EAAcF,EAAW5G,cAAc,mBAEvC+G,EAAoBhH,SAASoG,MAAM,eACnCa,EAAcD,EAAkB/G,cACpC,6BAEIiH,EAAqBlH,SAASC,cAAc,2BAC5CkH,EAAoBnH,SAASC,cAAc,mBAE3CmH,EAAmBV,EAAgBzG,cAAc,kBACjDoH,EAAsBlB,EAAmBlG,cAAc,kBACvDqH,EAAqBN,EAAkB/G,cAAc,kBAErD0E,EAAgB,CACpB4C,aAAc,eACd7B,cAAe,gBACfC,qBAAsB,iBACtB3B,oBAAqB,yBACrBT,gBAAiB,0BACjBC,WAAY,wBAGVlD,EAAgB,MDmDY,SAACqE,GACdY,MAAMC,KACrBxF,SAASyF,iBAAiBd,EAAc4C,eAEjC3B,SAAQ,SAACxC,IA3CM,SAACA,EAAauB,GACtC,IAAMP,EAAYmB,MAAMC,KACtBpC,EAAYqC,iBAAiBd,EAAce,gBAEvCrB,EAAgBjB,EAAYnD,cAChC0E,EAAcgB,sBAIhBxB,EAAkBC,EAAWC,EAAeM,GAE5CP,EAAUwB,SAAQ,SAACvC,GACjBA,EAAajB,iBAAiB,SAAS,WACrCsC,EAAQtB,EAAaC,EAAcsB,GACnCR,EAAkBC,EAAWC,EAAeM,EAC9C,IAGAtB,EAAajB,iBAAiB,QAAQ,WACpCsC,EAAQtB,EAAaC,EAAcsB,EACrC,GACF,GACF,CAsBI6C,CAAkBpE,EAAauB,EACjC,GACF,CClDA8C,CAAiB9C,GAGjBkB,EAAgB,CACdtF,aA8CF,SAA0BmH,GACxB,IAAMC,EAAc7B,EAAY7F,cAAc,aAADJ,OAAc6H,EAAM,OACjE,OAAKA,GAAWC,EJzEQ,SAACD,GACzB,OAAOE,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,WAAAS,OAAU6H,GAAU,CAChDG,OAAQ,SACRxI,QAASF,EAAOE,UACfyI,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,GACrC,CIyESuI,CAAWL,GACfI,MAAK,WAEJ,OADAH,EAAYxF,UACL,CACT,IACC6F,OAAM,SAACC,GAEN,MADAC,QAAQC,MAAM,mBAAoBF,GAC5BA,CACR,KAZAC,QAAQC,MAAM,oCAAqC,CAAET,OAAAA,EAAQC,YAAAA,IACtDhI,QAAQC,OAAO,gBAY1B,EA7DEY,WHzEM,SAAwBkH,EAAQ3G,EAAYqH,IAClCrH,EAAWkB,UAAUoG,SAAS,+BD8DtB,SAACX,GACzB,OAAOE,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,iBAAAS,OAAgB6H,GAAU,CACtDG,OAAQ,SACRxI,QAASF,EAAOE,UACfyI,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,GACrC,CCjEa8I,CAAWZ,GDoDA,SAACA,GACvB,OAAOE,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,iBAAAS,OAAgB6H,GAAU,CACtDG,OAAQ,MACRxI,QAASF,EAAOE,UACfyI,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,GACrC,CCzDkC+I,CAASb,IACtCI,MAAK,SAACpH,GACL0H,EAAa9G,YAAcZ,EAAKgB,MAAMC,OACtCZ,EAAWkB,UAAUiC,OAAO,8BAC9B,IACC8D,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAChB,GACJ,EG+DExH,WA+DF,SAAuBJ,GAAiB,IAAdgB,EAAIhB,EAAJgB,KAAMF,EAAId,EAAJc,KAC9B2F,EAAU5F,IAAMC,EAChB2F,EAAU1F,IAAMC,EAChB0F,EAAYzF,YAAcD,EAC1BmB,EAAUqE,EACZ,GAhEA,IAAM2B,EAAW,CJnERZ,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,aAAa,CACzCyI,OAAQ,MACRxI,QAASF,EAAOE,UACfyI,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,IAgB5BoI,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,UAAU,CACtCyI,OAAQ,MACRxI,QAASF,EAAOE,UACfyI,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,KImDrC,SAASiJ,EAAc5E,EAAQ6E,GAA0C,IAA/BC,EAAWC,UAAAjH,OAAA,QAAAkH,IAAAD,UAAA,GAAAA,UAAA,GAAG,gBACtD/E,EAAOI,SAAWyE,EAClB7E,EAAOvC,YAAcoH,EACjBC,EACA9E,EAAOtC,QAAQuH,aAAe,WACpC,CAyGA9C,EAAkB5D,iBAAiB,SAAS,WAC1CiE,EAAUvB,MAAQyB,EAAYjF,YAC9BgF,EAASxB,MAAQ0B,EAAWlF,YAC5BgE,EAAgBa,EAAoBxB,GACpCnC,EAAU0D,EACZ,IAGAH,EAAe3D,iBAAiB,SAAS,WACvCsE,EAAgBqC,QAChBzD,EAAgBoB,EAAiB/B,GACjCnC,EAAUiE,EACZ,IAGAN,EAAmB/D,iBAAiB,UAhEpC,SAAiCS,GAK/B,IJrI2BxB,EAAM2H,EIiIjCnG,EAAIoG,iBACJR,EAAcpB,GAAqB,IJlIRhG,EIqITgF,EAAUvB,MJrIKkE,EIsIhB1C,EAASxB,MJrInB8C,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,aAAa,CACzCyI,OAAQ,QACRxI,QAASF,EAAOE,QAChB6J,KAAMC,KAAKC,UAAU,CACnB/H,KAAMA,EACN2H,MAAOA,MAERlB,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,KIgIhCsI,MAAK,SAACuB,GACL9C,EAAYjF,YAAc+H,EAAKhI,KAC/BmF,EAAWlF,YAAc+H,EAAKL,MAC9BrG,EAAWuD,EACb,IACC8B,OAAM,SAACG,GACND,QAAQC,MAAM,iCAAkCA,EAClD,IACCmB,SAAQ,WAEPb,EAAcpB,GAAqB,EACrC,GACJ,IA+CAX,EAAgBtE,iBAAiB,UAAU,SAACS,IAxH5C,SAAiCA,GJxDT,IAACxB,EAAMF,EIyD7B0B,EAAIoG,iBAEJR,EAAcrB,GAAkB,IJ3DT/F,EI8DVsF,EAAW7B,MJ9DK3D,EI+DhByF,EAAU9B,MJ9DhB8C,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,UAAU,CACtCyI,OAAQ,OACRxI,QAASF,EAAOE,QAChB6J,KAAMC,KAAKC,UAAU,CACnB/H,KAAMA,EACNF,KAAMA,MAEP2G,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,KI0DhCsI,MAAK,SAACyB,GACLrB,QAAQsB,IAAI,oBAAqBD,GACjC,IAAM5B,EAAcxH,EAAWoJ,EAAS1D,EAAevF,GACvDwF,EAAY2D,QAAQ9B,GACpBhF,EAAW8D,EACb,IACCuB,OAAM,SAACG,GACND,QAAQC,MAAM,+BAAgCA,EAChD,IACCmB,SAAQ,WAEPb,EAAcrB,GAAkB,EAClC,GACJ,CAkGEsC,CAAwB7G,EAC1B,IAGAsE,EAAkB/E,iBAAiB,SAAS,WAC1C4E,EAAkB+B,QAClBzD,EAAgB4B,EAAoBvC,GACpCnC,EAAU0E,EACZ,IAGAF,EAAkB5E,iBAAiB,UAxDnC,SAA0BS,GACxBA,EAAIoG,iBAEJ,IAAMU,EAAa1C,EAAYnC,MAAMC,OACrC0D,EAAcnB,GAAoB,GJtGD,SAACqC,GAClC,OAAO/B,MAAM,GAAD/H,OAAIV,EAAOC,QAAO,oBAAoB,CAChDyI,OAAQ,QACRxI,QAASF,EAAOE,QAChB6J,KAAMC,KAAKC,UAAU,CAAEQ,OAAQD,MAC9B7B,MAAK,SAACtI,GAAG,OAAKD,EAAcC,EAAI,GACrC,CImGEqK,CAAoBF,GACjB7B,MAAK,SAAUuB,GAEdlC,EAAkB9E,MAAMyH,gBAAkB,QAAHjK,OAAWwJ,EAAKO,OAAM,MAC7D5C,EAAkB+B,QAClBpG,EAAWuE,EACb,IACCc,OAAM,SAAUG,GAEfD,QAAQC,MAAM,UAAWA,GACzB4B,MAAM,6BACR,IACCT,SAAQ,WAEPb,EAAcnB,GAAoB,EACpC,GACJ,IAoCArB,EAAOL,SF/LA,SAA2BoE,GACZA,EAAM/J,cAAc,iBAC5BmC,iBAAiB,SAAS,WACpCO,EAAWqH,EACb,IACAA,EAAM5H,iBAAiB,QAASY,GAChCgH,EAAM/H,UAAUC,IAAI,oBACtB,IE2LAvC,QAAQsK,IAAIzB,GACTV,MAAK,SAAAnE,GAAuB,I,IAAAG,G,EAAA,E,4CAAAH,I,s1BAArBuG,EAAQpG,EAAA,GAAEqG,EAAKrG,EAAA,GACrBxD,EAAgB4J,EAASzI,IACzB8E,EAAYjF,YAAc4I,EAAS7I,KACnCmF,EAAWlF,YAAc4I,EAASlB,MAClC7B,EAAkB9E,MAAMyH,gBAAkB,QAAHjK,OAAWqK,EAASN,OAAM,MACjEO,EAAMvE,SAAQ,SAAClF,GAIb,IAAMiH,EAAcxH,EAAWO,EAAMmF,EAAevF,GACpDwF,EAAYsE,OAAOzC,EACrB,GACF,IACCK,OAAM,SAACC,GAAG,OAAKC,QAAQC,MAAM,mBAAoBF,EAAI,G","sources":["webpack://praktikum/webpack/bootstrap","webpack://praktikum/./src/scripts/components/api.js","webpack://praktikum/./src/scripts/components/card.js","webpack://praktikum/./src/scripts/components/modal.js","webpack://praktikum/./src/scripts/components/validation.js","webpack://praktikum/./src/scripts/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-42\",\r\n  headers: {\r\n    authorization: \"6d6e6745-592a-4088-96e2-93e213c43291\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nfunction checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка ${res.status}`);\r\n}\r\n\r\n// Данные пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nexport const patchProfile = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\n// Загрузка карточек с сервера\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nexport const postCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      link: link,\r\n    }),\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\n// Функция для постановки лайка\r\nexport const likeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\n// Функция для удаления лайка\r\nexport const unlikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nexport const patchProfileAvatare = (linkAvatar) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar: linkAvatar }),\r\n  }).then((res) => checkResponse(res));\r\n};\r\n","// @todo: Темплейт карточки\r\n\r\nimport { likeCard, unlikeCard } from './api.js';\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n\r\n// Функция клика на лайк\r\nexport  function handleCardLike(cardId, likeButton, likesCounter) {\r\n  const isLiked = likeButton.classList.contains(\"card__like-button_is-active\");\r\n\r\n  (isLiked ? unlikeCard(cardId) : likeCard(cardId))\r\n    .then((card) => {\r\n      likesCounter.textContent = card.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n}\r\n\r\n// @todo: Функция создания карточки\r\nexport function createCard(\r\n  cardData,\r\n  { onDeleteCard, onLikeCard, onOpenView },\r\n  currentUserId\r\n) {\r\n  const card = cardTemplate.querySelector(\".places__item\").cloneNode(true);\r\n  const cardImage = card.querySelector(\".card__image\");\r\n  const cardTitle = card.querySelector(\".card__title\");\r\n  const deleteButton = card.querySelector(\".card__delete-button\");\r\n  const likeButton = card.querySelector(\".card__like-button\");\r\n  const likeCount = card.querySelector(\".card__like-count\");\r\n  const likeModifier = \"card__like-button_is-active\";\r\n\r\n  cardImage.src = cardData.link;\r\n  cardImage.alt = cardData.name;\r\n  cardTitle.textContent = cardData.name;\r\n  card.dataset.id = cardData._id;\r\n  likeCount.textContent = cardData.likes.length;\r\n\r\n  // Устанавливаем количество лайков\r\n  likeCount.textContent = cardData.likes.length;\r\n\r\n  // Проверяем, есть ли лайк текущего пользователя\r\n  const isLikedByMe = cardData.likes.some((user) => user._id === currentUserId);\r\n  const isMyCard = cardData.owner._id === currentUserId;\r\n\r\n  // Обновляем класс для лайка\r\n  if (isLikedByMe) {\r\n    likeButton.classList.add(likeModifier);\r\n  } else {\r\n    likeButton.classList.remove(likeModifier);\r\n  }\r\n\r\n  likeButton.addEventListener(\"click\", () => {\r\n    onLikeCard(cardData._id, likeButton, likeCount); // Теперь передаем все нужные элементы\r\n  });\r\n\r\n  if (isMyCard) {\r\n    deleteButton.style.display = \"block\";\r\n    deleteButton.addEventListener(\"click\", () => {\r\n      onDeleteCard(cardData._id, card); // Передаём и id, и DOM-элемент\r\n    });\r\n  } else {\r\n    deleteButton.style.display = \"none\";\r\n  }\r\n\r\n  cardImage.addEventListener(\"click\", () => {\r\n    onOpenView(cardData);\r\n  });\r\n\r\n  return card;\r\n}\r\n","const popupOpendClass = \"popup_is-opened\";\r\n\r\n// Универсальная функция открытия попапа\r\nexport function openModal(popupElement) {\r\n  // Открываем нужный попап\r\n\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n  // popupElement.classList.add(\"popup_is-animated\");\r\n  // setTimeout(() => {\r\n  //   popupElement.classList.add(popupOpendClass);\r\n  // }, 10);\r\n\r\n  // void popupElement.offsetWidth; // Принудительный перерасчёт\r\n  popupElement.classList.add(popupOpendClass);\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n\r\n// Универсальная функция закрытия попапа\r\nexport function closeModal(popupElement) {\r\n  popupElement.classList.remove(popupOpendClass);\r\n  // Удаляем обработчики закрытия\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// Обработчик закрытия по ESC\r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(`.${popupOpendClass}`);\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\n// Обработчик закрытия по клику на оверлей\r\nexport function handleOverlayClick(evt) {\r\n  if (evt.target === evt.currentTarget) {\r\n    closeModal(evt.currentTarget);\r\n  }\r\n}\r\n\r\nexport function handleButtonClose(popup) {\r\n  const closeButton = popup.querySelector(\".popup__close\");\r\n  closeButton.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n  });\r\n  popup.addEventListener(\"click\", handleOverlayClick);\r\n  popup.classList.add(\"popup_is-animated\");\r\n}\r\n","const showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  { inputErrorClass, errorClass }\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(errorClass);\r\n};\r\n\r\nconst hideInputError = (\r\n  formElement,\r\n  inputElement,\r\n  { inputErrorClass, errorClass }\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  if (!errorElement) return;\r\n\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.classList.remove(errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => !inputElement.validity.valid);\r\n};\r\n\r\nconst setButtonState = (button, { inactiveButtonClass }, isDisabled) => {\r\n  if (!button) return;\r\n  button.disabled = isDisabled;\r\n  button.classList.toggle(inactiveButtonClass, isDisabled);\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, config) => {\r\n  const isInvalid = hasInvalidInput(inputList);\r\n  setButtonState(buttonElement, config, isInvalid);\r\n};\r\n\r\nconst isValid = (formElement, inputElement, classValidate) => {\r\n  // Сбрасываем кастомные ошибки\r\n  inputElement.setCustomValidity(\"\");\r\n\r\n  // Проверка на пустое поле (только если поле обязательно)\r\n  if (inputElement.required && inputElement.value.trim() === \"\") {\r\n    const errorMessage = inputElement.dataset.errorEmpty;\r\n    inputElement.setCustomValidity(errorMessage);\r\n    showInputError(formElement, inputElement, errorMessage, classValidate);\r\n    return false;\r\n  }\r\n\r\n  // Проверка регулярного выражения (только для кастомных проверок)\r\n  if (inputElement.dataset.validatePattern) {\r\n    const patternRegex = new RegExp(inputElement.dataset.validatePattern);\r\n    if (!patternRegex.test(inputElement.value)) {\r\n      const errorMessage = inputElement.dataset.errorFormat;\r\n      inputElement.setCustomValidity(errorMessage);\r\n      showInputError(formElement, inputElement, errorMessage, classValidate);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Встроенная валидация браузера\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage, // Браузер сам подставит правильное сообщение о длине\r\n      classValidate\r\n    );\r\n    return false;\r\n  }\r\n\r\n  hideInputError(formElement, inputElement, classValidate);\r\n  return true;\r\n};\r\n\r\nconst setEventListeners = (formElement, classValidate) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(classValidate.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    classValidate.submitButtonSelector\r\n  );\r\n\r\n  // Добавляем проверку при инициализации\r\n  toggleButtonState(inputList, buttonElement, classValidate);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, classValidate);\r\n      toggleButtonState(inputList, buttonElement, classValidate);\r\n    });\r\n\r\n    // Добавляем проверку при потере фокуса\r\n    inputElement.addEventListener(\"blur\", () => {\r\n      isValid(formElement, inputElement, classValidate);\r\n    });\r\n  });\r\n};\r\n\r\nexport const resetValidation = (formElement, classValidate) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(classValidate.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    classValidate.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, classValidate);\r\n  });\r\n\r\n  setButtonState(buttonElement, classValidate, true);\r\n};\r\n\r\nexport const enableValidation = (classValidate) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(classValidate.formSelector)\r\n  );\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, classValidate);\r\n  });\r\n};\r\n\r\nexport const clearValidation = (formElement, classValidate) => {\r\n  // Находим все поля ввода\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(classValidate.inputSelector)\r\n  );\r\n  // Находим кнопку отправки\r\n  const buttonElement = formElement.querySelector(\r\n    classValidate.submitButtonSelector\r\n  );\r\n\r\n  // Очищаем ошибки для всех полей\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, classValidate);\r\n    inputElement.setCustomValidity(\"\");\r\n  });\r\n\r\n  // Делаем кнопку неактивной\r\n  setButtonState(buttonElement, classValidate, true);\r\n};\r\n","// import { initialCards } from \"./cards.js\";\r\nimport { createCard, handleCardLike } from \"./components/card.js\";\r\nimport {\r\n  openModal,\r\n  closeModal,\r\n  handleButtonClose,\r\n} from \"./components/modal.js\";\r\n\r\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\r\n\r\nimport {\r\n  getUserInfo,\r\n  getInitialCards,\r\n  patchProfile,\r\n  postCard,\r\n  deleteCard,\r\n  patchProfileAvatare,\r\n} from \"./components/api.js\";\r\n\r\n// @todo: DOM узлы\r\nconst contentList = document.querySelector(\".places__list\");\r\nconst openButtonCard = document.querySelector(\".profile__add-button\"); // Кнопка открытия поапа для добавления карточек\r\nconst openButtonProfile = document.querySelector(\".profile__edit-button\"); // Кнопка открытия поапа для редактирования поофиля\r\nconst popups = document.querySelectorAll(\".popup\"); // Все кнопки закрытия\r\n\r\n// DOM узлы профиля\r\nconst popupProfile = document.querySelector(\".popup_type_edit\"); //popup профиля\r\nconst formElementProfile = document.forms[\"edit-profile\"]; //форма для редактирования профиля\r\nconst nameInput = formElementProfile.querySelector(\".popup__input_type_name\"); // поле ввода имени\r\nconst jobInput = formElementProfile.querySelector(\r\n  \".popup__input_type_description\"\r\n); // поле ввода занятия\r\nconst profileName = document.querySelector(\".profile__title\"); // имя профиля на странице\r\nconst profileJob = document.querySelector(\".profile__description\"); // занятие в профиле на странице\r\n\r\n//  DOM узлы карточек\r\nconst popupCardAdd = document.querySelector(\".popup_type_new-card\"); //popup карточки\r\nconst formElementCard = document.forms[\"new-place\"]; //форма для добавления карточки\r\nconst placeInput = formElementCard.querySelector(\r\n  \".popup__input_type_card-name\"\r\n); // поле ввода наименования\r\nconst linkInput = formElementCard.querySelector(\".popup__input_type_url\"); // поле ввода страницы\r\nconst imagePopup = document.querySelector(\".popup_type_image\"); //popup для открытия карточки\r\nconst imageView = imagePopup.querySelector(\".popup__image\"); //popup картинки\r\nconst captionView = imagePopup.querySelector(\".popup__caption\"); //popup наименования\r\n// профиль\r\nconst formProfileAvatar = document.forms[\"edit-avatar\"];\r\nconst avatarInput = formProfileAvatar.querySelector(\r\n  \".popup__input_type_avatar\"\r\n);\r\nconst popupProfileAvatar = document.querySelector(\".popup_type_edit-avatar\");\r\nconst openProfileAvatar = document.querySelector(\".profile__image\");\r\n\r\nconst cardSubmitButton = formElementCard.querySelector(\".popup__button\");\r\nconst profileSubmitButton = formElementProfile.querySelector(\".popup__button\");\r\nconst avatwrSubmitButton = formProfileAvatar.querySelector(\".popup__button\");\r\n\r\nconst classValidate = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\nlet currentUserId = null;\r\n\r\nlet cardCallbacks = {\r\n  onDeleteCard: null,\r\n  onLikeCard: null,\r\n  onOpenView: null,\r\n};\r\n\r\nenableValidation(classValidate);\r\n\r\n// Функция для обновления колбэков\r\ncardCallbacks = {\r\n  onDeleteCard: handleCardDelete,\r\n  onLikeCard: handleCardLike,\r\n  onOpenView: handleOpenView,\r\n};\r\n\r\n// Создаем массив промисов\r\nconst promises = [\r\n  getUserInfo(), // Запрос данных пользователя\r\n  getInitialCards(), // Запрос карточек\r\n];\r\n\r\n/** Функция состояния загрузки для кнопки */\r\nfunction renderLoading(button, isLoading, loadingText = \"Сохранение...\") {\r\n  button.disabled = isLoading;\r\n  button.textContent = isLoading\r\n    ? loadingText\r\n    : button.dataset.defaultText || \"Сохранить\";\r\n}\r\n\r\n/** Функция добавления карточки **/\r\nfunction handleAddCardFormSubmit(evt) {\r\n  evt.preventDefault();\r\n\r\n  renderLoading(cardSubmitButton, true);\r\n\r\n  // Получаем данные из формы\r\n  const name = placeInput.value;\r\n  const link = linkInput.value;\r\n\r\n  postCard(name, link)\r\n    .then((newCard) => {\r\n      console.log(\"Карточка создана:\", newCard);\r\n      const cardElement = createCard(newCard, cardCallbacks, currentUserId);\r\n      contentList.prepend(cardElement);\r\n      closeModal(popupCardAdd); // Очищаем форму и закрываем попап\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Не удалось создать карточку:\", error); // Cообщение об ошибке\r\n    })\r\n    .finally(function () {\r\n      // Восстанавливаем кнопку\r\n      renderLoading(cardSubmitButton, false);\r\n    });\r\n}\r\n\r\n/**  Функция удаления карточки **/\r\nfunction handleCardDelete(cardId) {\r\n  const cardElement = contentList.querySelector(`[data-id=\"${cardId}\"]`);\r\n  if (!cardId || !cardElement) {\r\n    console.error(\"Недостаточно данных для удаления:\", { cardId, cardElement });\r\n    return Promise.reject(\"Invalid data\");\r\n  }\r\n\r\n  return deleteCard(cardId)\r\n    .then(() => {\r\n      cardElement.remove();\r\n      return true; // Успешное удаление\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка удаления:\", err);\r\n      throw err; // Пробрасываем ошибку дальше\r\n    });\r\n}\r\n\r\n/** Функция открытия карточки popup **/\r\nfunction handleOpenView({ name, link }) {\r\n  imageView.src = link;\r\n  imageView.alt = name;\r\n  captionView.textContent = name;\r\n  openModal(imagePopup);\r\n}\r\n\r\n/* Функция изменения профиля */\r\nfunction handleFormProfileSubmit(evt) {\r\n  evt.preventDefault(); // Отмена стандартной отправки формы\r\n  renderLoading(profileSubmitButton, true);\r\n\r\n  // Получение значений полей jobInput и nameInput из свойства value\r\n  const nameValue = nameInput.value;\r\n  const jobValue = jobInput.value;\r\n  patchProfile(nameValue, jobValue)\r\n    .then((data) => {\r\n      profileName.textContent = data.name;\r\n      profileJob.textContent = data.about;\r\n      closeModal(popupProfile);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", error);\r\n    })\r\n    .finally(function () {\r\n      // Восстанавливаем кнопку\r\n      renderLoading(profileSubmitButton, false);\r\n    });\r\n}\r\n\r\n/** Функция обновления профиля аватара */\r\nfunction handleAvatarEdit(evt) {\r\n  evt.preventDefault(); // Отменяем стандартную отправку формы\r\n\r\n  const linkAvatar = avatarInput.value.trim();\r\n  renderLoading(avatwrSubmitButton, true);\r\n\r\n  // Отправляем запрос на сервер\r\n  patchProfileAvatare(linkAvatar)\r\n    .then(function (data) {\r\n      // Успех: обновляем аватар и закрываем попап\r\n      openProfileAvatar.style.backgroundImage = `url('${data.avatar}')`;\r\n      formProfileAvatar.reset(); // Очищаем форму\r\n      closeModal(popupProfileAvatar); // Закрываем попап\r\n    })\r\n    .catch(function (error) {\r\n      // Ошибка: выводим сообщение\r\n      console.error(\"Ошибка:\", error);\r\n      alert(\"Не удалось обновить аватар\");\r\n    })\r\n    .finally(function () {\r\n      // Восстанавливаем кнопку\r\n      renderLoading(avatwrSubmitButton, false);\r\n    });\r\n}\r\n\r\n// Обработчики открытия профиля\r\nopenButtonProfile.addEventListener(\"click\", () => {\r\n  nameInput.value = profileName.textContent;\r\n  jobInput.value = profileJob.textContent;\r\n  clearValidation(formElementProfile, classValidate);\r\n  openModal(popupProfile);\r\n});\r\n\r\n// Обработчики открытия карточки\r\nopenButtonCard.addEventListener(\"click\", () => {\r\n  formElementCard.reset(); \r\n  clearValidation(formElementCard, classValidate); \r\n  openModal(popupCardAdd);\r\n});\r\n\r\n// Назначаем обработчики открытия изменения профиля\r\nformElementProfile.addEventListener(\"submit\", handleFormProfileSubmit);\r\n\r\n// Назначаем обработчики добавления карточки\r\nformElementCard.addEventListener(\"submit\", (evt) => {\r\n  handleAddCardFormSubmit(evt);\r\n});\r\n\r\n// Открытие модального окна для профиля\r\nopenProfileAvatar.addEventListener(\"click\", () => {\r\n  formProfileAvatar.reset();\r\n  clearValidation(popupProfileAvatar, classValidate);\r\n  openModal(popupProfileAvatar);\r\n});\r\n\r\n// добавление обработчика для профиля\r\nformProfileAvatar.addEventListener(\"submit\", handleAvatarEdit);\r\n\r\n// Назначаем обработчики закрытия на все кнопки закрытия\r\npopups.forEach(handleButtonClose);\r\n\r\n//  Выводим карточки на страницу\r\nPromise.all(promises)\r\n  .then(([userData, cards]) => {\r\n    currentUserId = userData._id; // Сохраняем ID текущего пользователя\r\n    profileName.textContent = userData.name;\r\n    profileJob.textContent = userData.about;\r\n    openProfileAvatar.style.backgroundImage = `url('${userData.avatar}')`;\r\n    cards.forEach((card) => {\r\n      // Создаем карточку с нужными колбэками\r\n      // Проверяем, является ли текущий пользователь владельцем карточки\r\n\r\n      const cardElement = createCard(card, cardCallbacks, currentUserId);\r\n      contentList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => console.error(\"Ошибка загрузки:\", err));\r\n\r\n/****************************************************************************************************/\r\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","createCard","cardData","_ref","currentUserId","onDeleteCard","onLikeCard","onOpenView","card","cloneNode","cardImage","cardTitle","deleteButton","likeButton","likeCount","likeModifier","src","link","alt","name","textContent","dataset","id","_id","likes","length","isLikedByMe","some","user","isMyCard","owner","classList","add","remove","addEventListener","style","display","popupOpendClass","openModal","popupElement","handleEscape","closeModal","removeEventListener","evt","key","openedPopup","handleOverlayClick","target","currentTarget","showInputError","formElement","inputElement","errorMessage","inputErrorClass","errorClass","errorElement","hideInputError","_ref2","setButtonState","button","_ref3","isDisabled","inactiveButtonClass","disabled","toggle","toggleButtonState","inputList","buttonElement","isInvalid","validity","valid","hasInvalidInput","isValid","classValidate","setCustomValidity","required","value","trim","errorEmpty","validatePattern","RegExp","test","errorFormat","validationMessage","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","cardCallbacks","contentList","openButtonCard","openButtonProfile","popups","popupProfile","formElementProfile","forms","nameInput","jobInput","profileName","profileJob","popupCardAdd","formElementCard","placeInput","linkInput","imagePopup","imageView","captionView","formProfileAvatar","avatarInput","popupProfileAvatar","openProfileAvatar","cardSubmitButton","profileSubmitButton","avatwrSubmitButton","formSelector","setEventListeners","enableValidation","cardId","cardElement","fetch","method","then","deleteCard","catch","err","console","error","likesCounter","contains","unlikeCard","likeCard","promises","renderLoading","isLoading","loadingText","arguments","undefined","defaultText","reset","about","preventDefault","body","JSON","stringify","data","finally","newCard","log","prepend","handleAddCardFormSubmit","linkAvatar","avatar","patchProfileAvatare","backgroundImage","alert","popup","all","userData","cards","append"],"sourceRoot":""}