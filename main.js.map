{"version":3,"file":"main.js","mappings":"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","sources":["webpack://praktikum/webpack/bootstrap","webpack://praktikum/./src/scripts/components/card.js","webpack://praktikum/./src/scripts/components/modal.js","webpack://praktikum/./src/scripts/components/validation.js","webpack://praktikum/./src/scripts/components/api.js","webpack://praktikum/./src/scripts/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// @todo: Темплейт карточки\r\n// const cardTemplatePlacesItemSelector = \".places__item\";\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n\r\n// @todo: Функция создания карточки\r\nexport function createCard(\r\n  cardData,\r\n  { onDeleteCard, onLikeCard, onOpenView },\r\n  currentUserId\r\n) {\r\n  const card = cardTemplate.querySelector(\".places__item\").cloneNode(true);\r\n  const cardImage = card.querySelector(\".card__image\");\r\n  const cardTitle = card.querySelector(\".card__title\");\r\n  const deleteButton = card.querySelector(\".card__delete-button\");\r\n  const likeButton = card.querySelector(\".card__like-button\");\r\n  const likeCount = card.querySelector(\".card__like-count\");\r\n  const likeModifier = \"card__like-button_is-active\";\r\n\r\n  cardImage.src = cardData.link;\r\n  cardImage.alt = cardData.name;\r\n  cardTitle.textContent = cardData.name;\r\n  card.dataset.id = cardData._id;\r\n  likeCount.textContent = cardData.likes.length;\r\n\r\n  // Устанавливаем количество лайков\r\n  likeCount.textContent = cardData.likes.length;\r\n\r\n  // Проверяем, есть ли лайк текущего пользователя\r\n  const isLikedByMe = cardData.likes.some((user) => user._id === currentUserId);\r\n\r\n  // Обновляем класс для лайка\r\n  if (isLikedByMe) {\r\n    likeButton.classList.add(likeModifier);\r\n  } else {\r\n    likeButton.classList.remove(likeModifier);\r\n  }\r\n\r\n  likeButton.addEventListener(\"click\", () => {\r\n    onLikeCard(cardData._id, likeButton, likeCount); // Теперь передаем все нужные элементы\r\n  });\r\n\r\n  if (onDeleteCard) {\r\n    deleteButton.style.display = \"block\";\r\n    deleteButton.addEventListener(\"click\", () => {\r\n      onDeleteCard(cardData._id, card); // Передаём и id, и DOM-элемент\r\n    });\r\n  } else {\r\n    deleteButton.style.display = \"none\";\r\n  }\r\n\r\n  cardImage.addEventListener(\"click\", () => {\r\n    onOpenView(cardData);\r\n  });\r\n\r\n  return card;\r\n}\r\n","const popupOpendClass = \"popup_is-opened\";\r\n\r\n// Универсальная функция открытия попапа\r\nexport function openModal(popupElement) {\r\n  // Открываем нужный попап\r\n\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n  // popupElement.classList.add(\"popup_is-animated\");\r\n  // setTimeout(() => {\r\n  //   popupElement.classList.add(popupOpendClass);\r\n  // }, 10);\r\n\r\n  // void popupElement.offsetWidth; // Принудительный перерасчёт\r\n  popupElement.classList.add(popupOpendClass);\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n\r\n// Универсальная функция закрытия попапа\r\nexport function closeModal(popupElement) {\r\n  popupElement.classList.remove(popupOpendClass);\r\n  // Удаляем обработчики закрытия\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// Обработчик закрытия по ESC\r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(`.${popupOpendClass}`);\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\n// Обработчик закрытия по клику на оверлей\r\nexport function handleOverlayClick(evt) {\r\n  if (evt.target === evt.currentTarget) {\r\n    closeModal(evt.currentTarget);\r\n  }\r\n}\r\n\r\nexport function handleButtonClose(popup) {\r\n  const closeButton = popup.querySelector(\".popup__close\");\r\n  closeButton.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n  });\r\n  popup.addEventListener(\"click\", handleOverlayClick);\r\n  popup.classList.add(\"popup_is-animated\");\r\n}\r\n","const showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  { inputErrorClass, errorClass }\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(errorClass);\r\n};\r\n\r\nconst hideInputError = (\r\n  formElement,\r\n  inputElement,\r\n  { inputErrorClass, errorClass }\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  if (!errorElement) return;\r\n\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.classList.remove(errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => !inputElement.validity.valid);\r\n};\r\n\r\nconst toggleButtonState = (\r\n  inputList,\r\n  buttonElement,\r\n  { inactiveButtonClass }\r\n) => {\r\n  const isInvalid = hasInvalidInput(inputList);\r\n  buttonElement.disabled = isInvalid;\r\n  buttonElement.classList.toggle(inactiveButtonClass, isInvalid);\r\n};\r\n\r\nconst isValid = (formElement, inputElement, classValidate) => {\r\n  // Сбрасываем кастомные ошибки\r\n  inputElement.setCustomValidity(\"\");\r\n\r\n  // Проверка на пустое поле (только если поле обязательно)\r\n  if (inputElement.required && inputElement.value.trim() === \"\") {\r\n    const errorMessage = inputElement.dataset.errorEmpty;\r\n    inputElement.setCustomValidity(errorMessage);\r\n    showInputError(formElement, inputElement, errorMessage, classValidate);\r\n    return false;\r\n  }\r\n\r\n  // Проверка регулярного выражения (только для кастомных проверок)\r\n  if (inputElement.dataset.validatePattern) {\r\n    const patternRegex = new RegExp(inputElement.dataset.validatePattern);\r\n    if (!patternRegex.test(inputElement.value)) {\r\n      const errorMessage = inputElement.dataset.errorFormat;\r\n      inputElement.setCustomValidity(errorMessage);\r\n      showInputError(formElement, inputElement, errorMessage, classValidate);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Встроенная валидация браузера\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage, // Браузер сам подставит правильное сообщение о длине\r\n      classValidate\r\n    );\r\n    return false;\r\n  }\r\n\r\n  hideInputError(formElement, inputElement, classValidate);\r\n  return true;\r\n};\r\n\r\nconst setEventListeners = (formElement, classValidate) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(classValidate.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    classValidate.submitButtonSelector\r\n  );\r\n\r\n  // Добавляем проверку при инициализации\r\n  toggleButtonState(inputList, buttonElement, classValidate);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, classValidate);\r\n      toggleButtonState(inputList, buttonElement, classValidate);\r\n    });\r\n\r\n    // Добавляем проверку при потере фокуса\r\n    inputElement.addEventListener(\"blur\", () => {\r\n      isValid(formElement, inputElement, classValidate);\r\n    });\r\n  });\r\n};\r\n\r\nexport const resetValidation = (formElement, classValidate) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(classValidate.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    classValidate.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, classValidate);\r\n  });\r\n\r\n  if (buttonElement) {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(classValidate.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nexport const enableValidation = (classValidate) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(classValidate.formSelector)\r\n  );\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, classValidate);\r\n  });\r\n};\r\n\r\nexport const clearValidation = (formElement, classValidate) => {\r\n  // Находим все поля ввода\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(classValidate.inputSelector)\r\n  );\r\n  // Находим кнопку отправки\r\n  const buttonElement = formElement.querySelector(\r\n    classValidate.submitButtonSelector\r\n  );\r\n\r\n  // Очищаем ошибки для всех полей\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, classValidate);\r\n  });\r\n\r\n  // Делаем кнопку неактивной\r\n  if (buttonElement) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(classValidate.inactiveButtonClass);\r\n  }\r\n};\r\n","const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-42\",\r\n  headers: {\r\n    authorization: \"6d6e6745-592a-4088-96e2-93e213c43291\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Данные пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // если ошибка, отклоняем промис\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\nexport const patchProfile = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // если ошибка, отклоняем промис\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\n// Загрузка карточек с сервера\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // если ошибка, отклоняем промис\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\nexport const postCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      link: link,\r\n    }),\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\n// Функция для постановки лайка\r\nexport const likeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\n// Функция для удаления лайка\r\nexport const unlikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n\r\nexport const patchProfileAvatare = (linkAvatar) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar: linkAvatar }),\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    })\r\n    .catch(console.error);\r\n};\r\n","// import { initialCards } from \"./cards.js\";\r\nimport { createCard } from \"./components/card.js\";\r\nimport {\r\n  openModal,\r\n  closeModal,\r\n  handleButtonClose,\r\n} from \"./components/modal.js\";\r\n\r\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\r\n\r\nimport {\r\n  getUserInfo,\r\n  getInitialCards,\r\n  patchProfile,\r\n  postCard,\r\n  deleteCard,\r\n  likeCard,\r\n  unlikeCard,\r\n  patchProfileAvatare,\r\n} from \"./components/api.js\";\r\n\r\n// @todo: DOM узлы\r\nconst contentList = document.querySelector(\".places__list\");\r\nconst openButtonCard = document.querySelector(\".profile__add-button\"); // Кнопка открытия поапа для добавления карточек\r\nconst openButtonProfile = document.querySelector(\".profile__edit-button\"); // Кнопка открытия поапа для редактирования поофиля\r\nconst popups = document.querySelectorAll(\".popup\"); // Все кнопки закрытия\r\n\r\n// DOM узлы профиля\r\nconst popupProfile = document.querySelector(\".popup_type_edit\"); //popup профиля\r\nconst formElementProfile = document.forms[\"edit-profile\"]; //форма для редактирования профиля\r\nconst nameInput = formElementProfile.querySelector(\".popup__input_type_name\"); // поле ввода имени\r\nconst jobInput = formElementProfile.querySelector(\r\n  \".popup__input_type_description\"\r\n); // поле ввода занятия\r\nconst profileName = document.querySelector(\".profile__title\"); // имя профиля на странице\r\nconst profileJob = document.querySelector(\".profile__description\"); // занятие в профиле на странице\r\n\r\n//  DOM узлы карточек\r\nconst popupCardAdd = document.querySelector(\".popup_type_new-card\"); //popup карточки\r\nconst formElementCard = document.forms[\"new-place\"]; //форма для добавления карточки\r\nconst placeInput = formElementCard.querySelector(\r\n  \".popup__input_type_card-name\"\r\n); // поле ввода наименования\r\nconst linkInput = formElementCard.querySelector(\".popup__input_type_url\"); // поле ввода страницы\r\nconst imagePopup = document.querySelector(\".popup_type_image\"); //popup для открытия карточки\r\nconst imageView = imagePopup.querySelector(\".popup__image\"); //popup картинки\r\nconst captionView = imagePopup.querySelector(\".popup__caption\"); //popup наименования\r\n\r\nconst classValidate = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\nlet currentUserId = null;\r\nlet cardCallbacks = {\r\n  onDeleteCard: null,\r\n  onLikeCard: null,\r\n  onOpenView: null,\r\n};\r\n\r\nenableValidation(classValidate);\r\n\r\n// Функция для обновления колбэков\r\nfunction updateCardCallbacks(card) {\r\n  const isMyCard = card.owner._id === currentUserId;\r\n  cardCallbacks = {\r\n    onDeleteCard: isMyCard ? () => handleCardDelete(card._id, card) : null,\r\n    onLikeCard: handleCardLike,\r\n    onOpenView: handleOpenView,\r\n  };\r\n}\r\n\r\n// Создаем массив промисов\r\nconst promises = [\r\n  getUserInfo(), // Запрос данных пользователя\r\n  getInitialCards(), // Запрос карточек\r\n];\r\n\r\n// Загружаем профиль при загрузке страницы\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  getUserInfo()\r\n    .then((userData) => {\r\n      profileName.textContent = userData.name;\r\n      profileJob.textContent = userData.about;\r\n      openProfileAvatar.style.backgroundImage = `url('${userData.avatar}')`;\r\n    })\r\n    .catch(console.error);\r\n});\r\n\r\n/** Функция добавления карточки **/\r\nfunction handleAddCardFormSubmit(evt) {\r\n  evt.preventDefault();\r\n\r\n  const submitButton = formElementCard.querySelector(\".popup__button\");\r\n  const originalButtonText = submitButton.textContent;\r\n\r\n  // Блокируем кнопку на время запроса\r\n  submitButton.disabled = true;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  // Получаем данные из формы\r\n  const name = placeInput.value;\r\n  const link = linkInput.value;\r\n\r\n  postCard(name, link)\r\n    .then((newCard) => {\r\n      console.log(\"Карточка создана:\", newCard);\r\n      // Проверяем, является ли текущий пользователь владельцем карточки\r\n      updateCardCallbacks(newCard);\r\n      const cardElement = createCard(newCard, cardCallbacks);\r\n      contentList.prepend(cardElement);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Не удалось создать карточку:\", error); // Cообщение об ошибке\r\n    })\r\n    .finally(function () {\r\n      // Восстанавливаем кнопку\r\n      submitButton.disabled = false;\r\n      submitButton.textContent = originalButtonText;\r\n    });\r\n\r\n  closeModal(popupCardAdd); // Очищаем форму и закрываем попап\r\n}\r\n\r\n/**  Функция удаления карточки **/\r\nfunction handleCardDelete(cardId) {\r\n  const cardElement = contentList.querySelector(`[data-id=\"${cardId}\"]`);\r\n  if (!cardId || !cardElement) {\r\n    console.error(\"Недостаточно данных для удаления:\", { cardId, cardElement });\r\n    return Promise.reject(\"Invalid data\");\r\n  }\r\n\r\n  return deleteCard(cardId)\r\n    .then(() => {\r\n      cardElement.remove();\r\n      return true; // Успешное удаление\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка удаления:\", err);\r\n      throw err; // Пробрасываем ошибку дальше\r\n    });\r\n}\r\n\r\n// Функция клика на лайк\r\nfunction handleCardLike(cardId, likeButton, likesCounter) {\r\n  const isLiked = likeButton.classList.contains(\"card__like-button_is-active\");\r\n\r\n  (isLiked ? unlikeCard(cardId) : likeCard(cardId))\r\n    .then((card) => {\r\n      likesCounter.textContent = card.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n}\r\n\r\n/** Функция открытия карточки popup **/\r\nfunction handleOpenView({ name, link }) {\r\n  imageView.src = link;\r\n  imageView.alt = name;\r\n  captionView.textContent = name;\r\n  openModal(imagePopup);\r\n}\r\n\r\n/* Функция изменения профиля */\r\nfunction handleFormProfileSubmit(evt) {\r\n  evt.preventDefault(); // Отмена стандартной отправки формы\r\n  const submitButton = formElementProfile.querySelector(\".popup__button\");\r\n  const originalButtonText = submitButton.textContent;\r\n\r\n  submitButton.disabled = true;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  // Получение значений полей jobInput и nameInput из свойства value\r\n  const nameValue = nameInput.value;\r\n  const jobValue = jobInput.value;\r\n  patchProfile(nameValue, jobValue)\r\n    .then((data) => {\r\n      profileName.textContent = data.name;\r\n      profileJob.textContent = data.about;\r\n      closeModal(popupProfile);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", error);\r\n    })\r\n    .finally(function () {\r\n      // Восстанавливаем кнопку\r\n      submitButton.disabled = false;\r\n      submitButton.textContent = originalButtonText;\r\n    });\r\n}\r\n\r\n// Обработчики открытия профиля\r\nopenButtonProfile.addEventListener(\"click\", () => {\r\n  getUserInfo().then((userData) => {\r\n    nameInput.value = userData.name;\r\n    jobInput.value = userData.about;\r\n  });\r\n  clearValidation(formElementProfile, classValidate);\r\n  openModal(popupProfile);\r\n});\r\n\r\n// Обработчики открытия карточки\r\nopenButtonCard.addEventListener(\"click\", () => {\r\n  formElementCard.reset();\r\n  clearValidation(formElementCard, classValidate);\r\n  clearValidation(formElementProfile, classValidate);\r\n  openModal(popupCardAdd);\r\n});\r\n\r\n// Назначаем обработчики закрытия на все кнопки закрытия\r\npopups.forEach(handleButtonClose);\r\n\r\n// Назначаем обработчики открытия изменения профиля\r\nformElementProfile.addEventListener(\"submit\", handleFormProfileSubmit);\r\n\r\n// Назначаем обработчики добавления карточки\r\nformElementCard.addEventListener(\"submit\", (evt) => {\r\n  handleAddCardFormSubmit(evt);\r\n});\r\n\r\n//  Выводим карточки на страницу\r\nPromise.all(promises)\r\n  .then(([userData, cards]) => {\r\n    currentUserId = userData._id; // Сохраняем ID текущего пользователя\r\n    cards.forEach((card) => {\r\n      // Создаем карточку с нужными колбэками\r\n      // Проверяем, является ли текущий пользователь владельцем карточки\r\n      updateCardCallbacks(card);\r\n      const cardElement = createCard(card, cardCallbacks, currentUserId);\r\n      contentList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => console.error(\"Ошибка загрузки:\", err));\r\n\r\n/****************************************************************************************************/\r\nconst formProfileAvatar = document.forms[\"edit-avatar\"];\r\nconst avatarInput = formProfileAvatar.querySelector(\r\n  \".popup__input_type_avatar\"\r\n);\r\nconst popupProfileAvatar = document.querySelector(\".popup_type_edit-avatar\");\r\nconst openProfileAvatar = document.querySelector(\".profile__image\");\r\n\r\n// Обработчики открытия модального окна аватара\r\n// Открытие попапа для смены аватара\r\n\r\n/** Функция обновления профиля */\r\nfunction handleAvatarEdit(evt) {\r\n  evt.preventDefault(); // Отменяем стандартную отправку формы\r\n\r\n  const linkAvatar = avatarInput.value.trim();\r\n  const submitButton = formProfileAvatar.querySelector(\".popup__button\");\r\n  const originalButtonText = submitButton.textContent;\r\n\r\n  // Блокируем кнопку на время запроса\r\n  submitButton.disabled = true;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  // Отправляем запрос на сервер\r\n  patchProfileAvatare(linkAvatar)\r\n    .then(function (data) {\r\n      // Успех: обновляем аватар и закрываем попап\r\n      openProfileAvatar.style.backgroundImage = `url('${data.avatar}')`;\r\n      formProfileAvatar.reset(); // Очищаем форму\r\n    })\r\n    .catch(function (error) {\r\n      // Ошибка: выводим сообщение\r\n      console.error(\"Ошибка:\", error);\r\n      alert(\"Не удалось обновить аватар\");\r\n    })\r\n    .finally(function () {\r\n      // Восстанавливаем кнопку\r\n      submitButton.disabled = false;\r\n      submitButton.textContent = originalButtonText;\r\n    });\r\n  closeModal(popupProfileAvatar); // Закрываем попап\r\n}\r\n\r\n// Открытие модального окна для профиля\r\nopenProfileAvatar.addEventListener(\"click\", () => {\r\n  clearValidation(popupProfileAvatar, classValidate);\r\n  openModal(popupProfileAvatar);\r\n});\r\n\r\n// добавление обработчика для профиля\r\nformProfileAvatar.addEventListener(\"submit\", handleAvatarEdit);\r\n"],"names":["cardTemplate","document","querySelector","content","createCard","cardData","_ref","currentUserId","onDeleteCard","onLikeCard","onOpenView","card","cloneNode","cardImage","cardTitle","deleteButton","likeButton","likeCount","likeModifier","src","link","alt","name","textContent","dataset","id","_id","likes","length","some","user","classList","add","remove","addEventListener","style","display","popupOpendClass","openModal","popupElement","handleEscape","closeModal","removeEventListener","evt","key","openedPopup","concat","handleOverlayClick","target","currentTarget","showInputError","formElement","inputElement","errorMessage","inputErrorClass","errorClass","errorElement","hideInputError","_ref2","toggleButtonState","inputList","buttonElement","_ref3","inactiveButtonClass","isInvalid","validity","valid","hasInvalidInput","disabled","toggle","isValid","classValidate","setCustomValidity","required","value","trim","errorEmpty","validatePattern","RegExp","test","errorFormat","validationMessage","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","config","baseUrl","headers","authorization","getUserInfo","fetch","method","then","res","ok","json","Promise","reject","status","catch","console","error","contentList","openButtonCard","openButtonProfile","popups","popupProfile","formElementProfile","forms","nameInput","jobInput","profileName","profileJob","popupCardAdd","formElementCard","placeInput","linkInput","imagePopup","imageView","captionView","formSelector","cardCallbacks","updateCardCallbacks","isMyCard","owner","cardId","cardElement","deleteCard","err","handleCardLike","handleOpenView","setEventListeners","enableValidation","promises","likesCounter","contains","unlikeCard","likeCard","userData","about","openProfileAvatar","backgroundImage","avatar","reset","popup","preventDefault","submitButton","originalButtonText","body","JSON","stringify","data","finally","newCard","log","prepend","handleAddCardFormSubmit","all","cards","append","formProfileAvatar","avatarInput","popupProfileAvatar","linkAvatar","patchProfileAvatare","alert"],"sourceRoot":""}